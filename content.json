{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"08-20","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"08-20","excerpt":""}],"posts":[{"title":"springboot+indexdb","text":"","path":"2019/08/26/springboot-indexdb/","date":"08-26","excerpt":"","tags":[]},{"title":"indexdb","text":"indexdb概念了解写这篇文章主要是，因为项目中用到了这个东西，这篇文章的主要内容，我主要是记录一下，当时我完成app登录拦截功能时的思路。做功能之前我主要去网上参考了几篇文章，首先我去看了一下概念，了解概念以后，就分别去了解了一下indexdb是如何建库建表新增查找数据的。链接我提供一下，阮一峰网络日志 indexdb增删改查案例这里提供一篇参考博客indexdb增删改查实例因为我要实现登录功能，大概思路是创建数据库，然后创建数据表，将用户名存进去，下次登录直接在本地判断用户名是否存在即可，退出登录以后，先关闭数据库，在删除数据库。下面是我的测试代码，亲测可用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;indexdb&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; onclick=&quot;addData(myDB.db,&apos;students&apos;)&quot; value=&quot;新增数据&quot;&gt;&lt;input type=&quot;button&quot; onclick=&quot;closeDB(myDB.db)&quot; value=&quot;关闭数据库&quot;&gt;&lt;input type=&quot;button&quot; onclick=&quot;deleteDB(myDB.name)&quot; value=&quot;删除数据库&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt; var myDB = &#123; name: &apos;test&apos;, version: 1, db: null &#125;; var students = [&#123; id: 1001, name: &quot;Byron&quot;, age: 24 &#125;, &#123; id: 1002, name: &quot;Frank&quot;, age: 30 &#125;, &#123; id: 1003, name: &quot;Aaron&quot;, age: 26 &#125;, &#123; id: 1004, name: &quot;Casper&quot;, age: 26 &#125;]; function openDB(name, version) &#123; var version = version || 1; var request = window.indexedDB.open(name, version); request.onerror = function (e) &#123; console.log(e.currentTarget.error.message); &#125;; request.onsuccess = function (e) &#123; myDB.db = e.target.result; &#125;; request.onupgradeneeded = function (e) &#123; var db = e.target.result; if (!db.objectStoreNames.contains(&apos;students&apos;)) &#123; var store = db.createObjectStore(&apos;students&apos;, &#123; keyPath: &apos;id&apos; &#125;); store.createIndex(&apos;nameIndex&apos;, &apos;name&apos;, &#123; unique: true &#125;); store.createIndex(&apos;ageIndex&apos;, &apos;age&apos;, &#123; unique: false &#125;); &#125; console.log(&apos;DB version changed to &apos; + version); &#125;; &#125; function closeDB(db) &#123; db.close(); &#125; function deleteDB(name) &#123; indexedDB.deleteDatabase(name); &#125; function addData(db, storeName) &#123; var trans = db.transaction([storeName], &apos;readwrite&apos;); var store = trans.objectStore(storeName); for (var i = 0; i &lt; students.length; i++) &#123; store.add(students[i]); &#125; &#125; function getDataByKey(db, storeName, value) &#123; var transaction = db.transaction(storeName, &apos;readwrite&apos;); var store = transaction.objectStore(storeName); var request = store.get(value); request.onsuccess = function (e) &#123; var student = e.target.result; console.log(student.name); &#125;; &#125; function updateDataByKey(db, storeName, value) &#123; var transaction = db.transaction(storeName, &apos;readwrite&apos;); var store = transaction.objectStore(storeName); var request = store.get(value); request.onsuccess = function (e) &#123; var student = e.target.result; student.age = 35; store.put(student); &#125;; &#125; function deleteDataByKey(db, storeName, value) &#123; var transaction = db.transaction(storeName, &apos;readwrite&apos;); var store = transaction.objectStore(storeName); store.delete(value); &#125; function clearObjectStore(db, storeName) &#123; var transaction = db.transaction(storeName, &apos;readwrite&apos;); var store = transaction.objectStore(storeName); store.clear(); &#125; function deleteObjectStore(db, storeName) &#123; var transaction = db.transaction(storeName, &apos;versionchange&apos;); db.deleteObjectStore(storeName); &#125; function fetchStoreByCursor(db, storeName) &#123; var transaction = db.transaction(storeName); var store = transaction.objectStore(storeName); var request = store.openCursor(); request.onsuccess = function (e) &#123; var cursor = e.target.result; if (cursor) &#123; console.log(cursor.key); var currentStudent = cursor.value; console.log(currentStudent.name); cursor.continue(); &#125; &#125;; &#125; function getDataByIndex(db, storeName) &#123; var transaction = db.transaction(storeName); var store = transaction.objectStore(storeName); var index = store.index(&quot;ageIndex&quot;); index.get(26).onsuccess = function (e) &#123; var student = e.target.result; console.log(student.id); &#125; &#125; function getMultipleData(db, storeName) &#123; var transaction = db.transaction(storeName); var store = transaction.objectStore(storeName); var index = store.index(&quot;nameIndex&quot;); var request = index.openCursor(null, IDBCursor.prev); request.onsuccess = function (e) &#123; var cursor = e.target.result; if (cursor) &#123; var student = cursor.value; console.log(student.name); cursor.continue(); &#125; &#125; &#125; openDB(myDB.name,myDB.version);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 上面是一个封装好的indexdb代码，里面的方法我就暂时研究了indexdb初始化数据库，indexdb新建表并且添加数据，indexdb关闭数据库并且删除数据库，其他的暂时还没有用到了，简单看了一下，就没有测试了，感兴趣的朋友就自己测试吧，这里简单做一个记录，方便以后自己查看和回忆。","path":"2019/08/26/indexdb/","date":"08-26","excerpt":"","tags":[]},{"title":"myfirstblog","text":"最近搭建了一个自己的博客，用的是默认主题，（可能后期会去copy一个漂亮的主题）搭建博客的初衷是为了记录自己的学习历程，也许很low，也许没有任何参考价值，不过我还是要写，主要原因呢，还想要强迫一下自己学习，通过日记的形式记录自己一天干了啥，而不是傻傻的一天发呆就这样过去了，最近看了同事的博客，看了以前和他一起刚入公司时，他的一些学习历程，当时心里就很不是滋味，看看人家在学习的时候，你在干嘛呀，对吧。假装对自己说，还来得及，也许留下的时间不多了，顶多半年吧，半年以后，能否成为一个稍微看起来优秀的程序员嘛，这是一个未知数，不过，我想拼一把，身体里好战好勇的因子告诉我，这是一个挑战，接受它吧。那就接受任务了，希望最后不要不要打了自己的老脸才好。好啦，这就是我第一篇博客简介啦，接下来的每一天就记录学习日报。","path":"2019/08/21/myfirstblog/","date":"08-21","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/08/19/hello-world/","date":"08-19","excerpt":"","tags":[]}]}